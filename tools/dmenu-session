#!/bin/sh
#description: dmenu based session menu
#usage: dmenu-session [subcommand]

#example: dmenu-session
#appears a gui menu appears asking for which action to be taken

progname="$(expr "${0}" : '.*/\([^/]*\)')"

#variables are impractical to save complex cmds because of shell expantion
#therefore functions are required: http://mywiki.wooledge.org/BashFAQ/050
DMENU() { dmenu -p 'Session' -i -fn Bahamas-10 \
                -nb \#000000 -nf \#ffffff -sb \#c0c0c0 -sf \#000000; }
#looks better on xft powered dmenu:
#https://bugs.launchpad.net/ubuntu/+source/suckless-tools/+bug/1093745

_usage() {
    printf "%s\\n" "Usage: ${progname} [subcommand]"
    printf "%s\\n" "Dmenu based session menu."
    printf "%s\\n"
    printf "%s\\n" "  -h, --help   show this help message and exit"
    printf "%s\\n"
    printf "%s\\n" "Subcommands:"
    printf "%s\\n" "  lock"
    printf "%s\\n" "  relogin"
    printf "%s\\n" "  logout"
    printf "%s\\n" "  reboot|restart"
    printf "%s\\n" "  shutdown|halt"
    printf "%s\\n" "  suspend"
    printf "%s\\n" "  hibernate"
}

_die() {
    [ -n "${1}" ] && _die_msg="${1}" || exit 1
    printf "%b%b\\n" "${_die_msg}" ", press <Enter> to exit" | DMENU
    exit 1
}

_str2lower() {
    [ -z "${1}" ] && return 1
    printf "%s\\n" "${@}" | tr 'ABCDEFGHIJKLMNOPQRSTUVWXYZ' 'abcdefghijklmnopqrstuvwxyz'
}

_return_valid_color() {
    #return 1 if input is an invalid color code
    [ -z "${1}" ] && { printf "%s" "ffffffff"; return; } || _return_valid_color__arg="${1}"
    _return_valid_color__arg="$(_str2lower "${_return_valid_color__arg}")"
    _return_valid_color__arg="$(printf "%s" "${_return_valid_color__arg}" | sed 's:#::g')"
    case "${_return_valid_color__arg}" in
        #http://en.wikipedia.org/wiki/Web_colors#HTML_color_names
        white)   printf "%s" "ffffffff" ;; silver)  printf "%s" "c0c0c0ff" ;;
        gray)    printf "%s" "808080ff" ;; black)   printf "%s" "000000ff" ;;
        red)     printf "%s" "ff0000ff" ;; maroon)  printf "%s" "800000ff" ;;
        yellow)  printf "%s" "ffff00ff" ;; olive)   printf "%s" "808000ff" ;;
        lime)    printf "%s" "00ff00ff" ;; green)   printf "%s" "008000ff" ;;
        aqua)    printf "%s" "00ffffff" ;; teal)    printf "%s" "008080ff" ;;
        blue)    printf "%s" "0000ffff" ;; navy)    printf "%s" "000080ff" ;;
        fuchsia) printf "%s" "ff00ffff" ;; purple)  printf "%s" "800080ff" ;;
        *)
            case "${#_return_valid_color__arg}" in #string length
                8)  _return_valid_color__arg="$(printf "%s" \
                    "${_return_valid_color__arg}"|awk '/^[0-9a-f][0-9a-f][0-9a-f][0-9a-f][0-9a-f][0-9a-f][0-9a-f][0-9a-f]$/')"
                    [ -z "${_return_valid_color__arg}" ] && return 1
                    printf "%s" "${_return_valid_color__arg}"
                    ;;
                6)  _return_valid_color__arg="$(printf "%s" \
                    "${_return_valid_color__arg}"|awk '/^[0-9a-f][0-9a-f][0-9a-f][0-9a-f][0-9a-f][0-9a-f]$/')"
                    [ -z "${_return_valid_color__arg}" ] && return 1
                    _return_valid_color__arg="${_return_valid_color__arg}ff"
                    printf "%s" "${_return_valid_color__arg}"
                    ;;
                3)  _return_valid_color__arg="$(printf "%s" "${_return_valid_color__arg}"|awk '/^[0-9a-f][0-9a-f][0-9a-f]$/')"
                    [ -z "${_return_valid_color__arg}" ] && return 1
                    _return_valid_color__arg="$(printf "%s" \
                        "${_return_valid_color__arg}"|cut -c1)$(printf "%s" \
                        "${_return_valid_color__arg}"|cut -c1)$(printf "%s" \
                        "${_return_valid_color__arg}"|cut -c2)$(printf "%s" \
                        "${_return_valid_color__arg}"|cut -c2)$(printf "%s" \
                        "${_return_valid_color__arg}"|cut -c3)$(printf "%s" \
                        "${_return_valid_color__arg}"|cut -c3)ff"
                    printf "%s" "${_return_valid_color__arg}"
                    ;;
                *)  return 1 ;;
            esac
            ;;
    esac
}

_get_i3lock_params() {
    if [ -n "$(i3lock --bshlcolor 2>&1 | grep requires 2>&1)" ]; then
        _get_i3lock_params__inside="$(minos-config -n -c ~/.minos/session-manager lock-color-inside 2>/dev/null)"
        [ -z "${_get_i3lock_params__inside}" ] && _get_i3lock_params__inside="$(minos-config -n -c /etc/minos/session-manager lock-color-inside 2>/dev/null)"
        [ -z "${_get_i3lock_params__inside}" ] && _get_i3lock_params__inside="$(minos-config lock-color-inside 2>/dev/null)"
        [ -z "${_get_i3lock_params__inside}" ] || _get_i3lock_params__inside="$(_return_valid_color "${_get_i3lock_params__inside}")"
        [ -z "${_get_i3lock_params__inside}" ] && _get_i3lock_params__inside="ffffffff"

        _get_i3lock_params__inside_verification="$(minos-config -n -c ~/.minos/session-manager lock-color-inside-verification 2>/dev/null)"
        [ -z "${_get_i3lock_params__inside_verification}" ] && _get_i3lock_params__inside_verification="$(minos-config -n -c /etc/minos/session-manager lock-color-inside-verification 2>/dev/null)"
        [ -z "${_get_i3lock_params__inside_verification}" ] && _get_i3lock_params__inside_verification="$(minos-config lock-color-inside-verification 2>/dev/null)"
        [ -z "${_get_i3lock_params__inside_verification}" ] || _get_i3lock_params__inside_verification="$(_return_valid_color "${_get_i3lock_params__inside_verification}")"
        [ -z "${_get_i3lock_params__inside_verification}" ] && _get_i3lock_params__inside_verification="ffffffff"

        _get_i3lock_params__inside_wrong="$(minos-config -n -c ~/.minos/session-manager lock-color-inside-wrong 2>/dev/null)"
        [ -z "${_get_i3lock_params__inside_wrong}" ] && _get_i3lock_params__inside_wrong="$(minos-config -n -c /etc/minos/session-manager lock-color-inside-wrong 2>/dev/null)"
        [ -z "${_get_i3lock_params__inside_wrong}" ] && _get_i3lock_params__inside_wrong="$(minos-config lock-color-inside-wrong 2>/dev/null)"
        [ -z "${_get_i3lock_params__inside_wrong}" ] || _get_i3lock_params__inside_wrong="$(_return_valid_color "${_get_i3lock_params__inside_wrong}")"
        [ -z "${_get_i3lock_params__inside_wrong}" ] && _get_i3lock_params__inside_wrong="a52a2aff"

        _get_i3lock_params__ring="$(minos-config -n -c ~/.minos/session-manager lock-color-ring 2>/dev/null)"
        [ -z "${_get_i3lock_params__ring}" ] && _get_i3lock_params__ring="$(minos-config -n -c /etc/minos/session-manager lock-color-ring 2>/dev/null)"
        [ -z "${_get_i3lock_params__ring}" ] && _get_i3lock_params__ring="$(minos-config lock-color-ring  2>/dev/null)"
        [ -z "${_get_i3lock_params__ring}" ] || _get_i3lock_params__ring="$(_return_valid_color "${_get_i3lock_params__ring}")"
        [ -z "${_get_i3lock_params__ring}" ] && _get_i3lock_params__ring="000000ff"

        _get_i3lock_params__ring_verification="$(minos-config -n -c ~/.minos/session-manager lock-color-ring-verification 2>/dev/null)"
        [ -z "${_get_i3lock_params__ring_verification}" ] && _get_i3lock_params__ring_verification="$(minos-config -n -c /etc/minos/session-manager lock-color-ring-verification 2>/dev/null)"
        [ -z "${_get_i3lock_params__ring_verification}" ] && _get_i3lock_params__ring_verification="$(minos-config lock-color-ring-verification  2>/dev/null)"
        [ -z "${_get_i3lock_params__ring_verification}" ] || _get_i3lock_params__ring_verification="$(_return_valid_color "${_get_i3lock_params__ring_verification}")"
        [ -z "${_get_i3lock_params__ring_verification}" ] && _get_i3lock_params__ring_verification="ffffffff"

        _get_i3lock_params__ring_wrong="$(minos-config -n -c ~/.minos/session-manager lock-color-ring-wrong 2>/dev/null)"
        [ -z "${_get_i3lock_params__ring_wrong}" ] && _get_i3lock_params__ring_wrong="$(minos-config -n -c /etc/minos/session-manager lock-color-ring-wrong 2>/dev/null)"
        [ -z "${_get_i3lock_params__ring_wrong}" ] && _get_i3lock_params__ring_wrong="$(minos-config lock-color-ring-wrong 2>/dev/null)"
        [ -z "${_get_i3lock_params__ring_wrong}" ] || _get_i3lock_params__ring_wrong="$(_return_valid_color "${_get_i3lock_params__ring_wrong}")"
        [ -z "${_get_i3lock_params__ring_wrong}" ] && _get_i3lock_params__ring_wrong="a52a2aff"

        _get_i3lock_params__line="$(minos-config -n -c ~/.minos/session-manager lock-color-line 2>/dev/null)"
        [ -z "${_get_i3lock_params__line}" ] && _get_i3lock_params__line="$(minos-config -n -c /etc/minos/session-manager lock-color-line 2>/dev/null)"
        [ -z "${_get_i3lock_params__line}" ] && _get_i3lock_params__line="$(minos-config lock-color-line 2>/dev/null)"
        [ -z "${_get_i3lock_params__line}" ] || _get_i3lock_params__line="$(_return_valid_color "${_get_i3lock_params__line}")"
        [ -z "${_get_i3lock_params__line}" ] && _get_i3lock_params__line="00000000"

        _get_i3lock_params__keypress="$(minos-config -n -c ~/.minos/session-manager lock-color-keypress 2>/dev/null)"
        [ -z "${_get_i3lock_params__keypress}" ] && _get_i3lock_params__keypress="$(minos-config -n -c /etc/minos/session-manager lock-color-keypress 2>/dev/null)"
        [ -z "${_get_i3lock_params__keypress}" ] && _get_i3lock_params__keypress="$(minos-config lock-color-keypress 2>/dev/null)"
        [ -z "${_get_i3lock_params__keypress}" ] || _get_i3lock_params__keypress="$(_return_valid_color "${_get_i3lock_params__keypress}")"
        [ -z "${_get_i3lock_params__keypress}" ] && _get_i3lock_params__keypress="1e90ffff"

        _get_i3lock_params__delpress="$(minos-config -n -c ~/.minos/session-manager lock-color-delpress 2>/dev/null)"
        [ -z "${_get_i3lock_params__delpress}" ] && _get_i3lock_params__delpress="$(minos-config -n -c /etc/minos/session-manager lock-color-delpress 2>/dev/null)"
        [ -z "${_get_i3lock_params__delpress}" ] && _get_i3lock_params__delpress="$(minos-config lock-color-delpress 2>/dev/null)"
        [ -z "${_get_i3lock_params__delpress}" ] || _get_i3lock_params__delpress="$(_return_valid_color "${_get_i3lock_params__delpress}")"
        [ -z "${_get_i3lock_params__delpress}" ] && _get_i3lock_params__delpress="a52a2aff"

        i3lock_color_params="--insidecolor=${_get_i3lock_params__inside}|
                             --insidevercolor=${_get_i3lock_params__inside_verification}|
                             --insidewrongcolor=${_get_i3lock_params__inside_wrong}|
                             --ringcolor=${_get_i3lock_params__ring}|
                             --ringvercolor=${_get_i3lock_params__ring_verification}|
                             --ringwrongcolor=${_get_i3lock_params__ring_wrong}|
                             --linecolor=${_get_i3lock_params__line}|
                             --keyhlcolor=${_get_i3lock_params__keypress}|
                             --bshlcolor=${_get_i3lock_params__delpress}"
        i3lock_color_params="$(printf "%s" "${i3lock_color_params}"|awk '{ sub(/[ \t]+/, ""); printf "%s", $0 }')"
    fi

    _get_i3lock_params__wallpaper="$(minos-config lock-wallpaper 2>/dev/null)"

    if [ -f "${_get_i3lock_params__wallpaper}" ]; then
        printf "%s" "-i|${_get_i3lock_params__wallpaper}|-n|-t|${i3lock_color_params}"
    else
        printf "%s" "-c|000000|-n|-t|${i3lock_color_params}"
    fi
}

_lock() {
    lockprog="$(minos-config lock 2>/dev/null)"
    [ -z "${lockprog}" ] && lockprog="i3lock"

    if ! command -v "${lockprog}" >/dev/null 2>&1; then
        _die "install '${lockprog}' to run this option"
    fi

    [ X"${lockprog}" = X"i3lock" ] && i3lock_params="$(_get_i3lock_params)"
    if [ X"${lockprog}" = X"i3lock" ]; then
        #hack to allow spaces on wallpaper files
        IFS='|'; ${lockprog} ${i3lock_params}
    else
        ${lockprog}
    fi
}

_logout() {
    if ! command -v "i3-msg" >/dev/null 2>&1; then
        _die "install 'i3-msg' to run this option"
    fi
    i3-msg exit &
}

_relogin() {
    if ! command -v "i3-msg" >/dev/null 2>&1; then
        _die "install 'i3-msg' to run this option"
    fi
    i3-msg restart &
}

_reboot() {
    _legacy_reboot() {
        PATH="${PATH}:/sbin/"
        ${_sudo} 'shutdown -r now'
    }

    if command -v "dbus-send" >/dev/null 2>&1; then
        dbus-send --system --print-reply --dest="org.freedesktop.ConsoleKit" \
            /org/freedesktop/ConsoleKit/Manager \
            org.freedesktop.ConsoleKit.Manager.Restart || _legacy_reboot
    else
        _legacy_reboot
    fi
}

_shutdown() {
    _legacy_shutdown() {
        PATH="${PATH}:/sbin/"
        ${_sudo} 'shutdown -h now'
    }

    if command -v "dbus-send" >/dev/null 2>&1; then
        dbus-send --system --print-reply --dest="org.freedesktop.ConsoleKit" \
            /org/freedesktop/ConsoleKit/Manager \
            org.freedesktop.ConsoleKit.Manager.Stop || _legacy_shutdown
    else
        _legacy_shutdown
    fi
}

_suspend() {
    PATH="${PATH}:/usr/sbin/"
    suspend="$(minos-config suspend 2>/dev/null)"
    [ -z "${suspend}" ] && suspend="pm-suspend"
    if ! command -v "${suspend}" >/dev/null 2>&1; then
        _die "install '${suspend}' to run this option"
    fi
    ${_sudo} "${suspend}"
}

_hibernate() {
    PATH="${PATH}:/usr/sbin/"
    hibernate="$(minos-config hibernate 2>/dev/null)"
    [ -z "${hibernate}" ] && hibernate="pm-hibernate"
    if ! command -v "${hibernate}" >/dev/null 2>&1; then
        _die "install '${hibernate}' to run this option"
    fi
    ${_sudo} "${hibernate}"
}

_confirm() {
    if [ "${interactive}" = "1" ]; then
        _confirm__reply="$(printf "%s" "$(dmenu -p "Confirm ${*} [Y/n] " -i \
            -fn Bahamas-10 -nb '#000000' -nf '#FFFFFF' -sb '#da0000'        \
            -sf '#ffffff' <&- && printf "Y")" | tr -d '\n')"
        case "${_confirm__reply}" in
            'Y'|'yY'|'YY') return 0 ;;
            'yesY'|'YesY') return 0 ;;
                        *) return 1 ;;
        esac
    else
        return 0
    fi
}

if [ ! -t 0 ]; then
    #there is input comming from pipe or file, add to the end of $@
    set -- "${@}" $(cat)
fi

if [ -z "${1}" ]; then
    if ! command -v "dmenu" >/dev/null 2>&1; then
        printf "%s\\n" "${progname}: install 'dmenu' to run this program" >&2
        exit 1
    fi
    choice="$(printf "%b\\n" "lock\nrelogin\nlogout\nreboot\nshutdown\nsuspend\nhibernate" | DMENU)"
    interactive="1"
else
    choice="${1}"
fi

if command -v "gksudo" >/dev/null 2>&1; then
    _sudo="gksudo"
else
    _sudo="sudo"
fi

[ X"${LOGNAME}" = X"root" ] && _sudo=""

case "${choice}" in
     -h|--help) _usage && exit                 ;;
          lock) _lock                          ;;
       relogin) _relogin                       ;;
        logout) _confirm logout   && _logout   ;;
reboot|restart) _confirm reboot   && _reboot   ;;
 shutdown|halt) _confirm shutdown && _shutdown ;;
       suspend) _lock &
                player-ctrl pause >/dev/null 2>&1
                _suspend  ;;
     hibernate) _lock &
                player-ctrl pause >/dev/null 2>&1
               _hibernate ;;
             *) exit 1    ;;
esac
